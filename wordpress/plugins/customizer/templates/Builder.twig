{% macro input(element, classes, attributes) %}
  {% import _self as builder %}

  {% if classes is empty %}
    {% set classes = [] %}
  {% endif %}
  {% if attributes is empty %}
    {% set attributes = [] %}
  {% endif %}

  {# DefaultのTwigには Swich構文がないらしい #}
  {% if element.input_type == constant('SI_FIELD_TYPE_TEXT') %}
    {{ builder.text(element, classes, attributes) }}
  {% elseif element.input_type == constant('SI_FIELD_TYPE_TEXTAREA') %}
    {{ builder.textarea(element, classes, attributes) }}
  {% elseif element.input_type == constant('SI_FIELD_TYPE_CHECKBOX') %}
    {{ builder.checkbox(element, classes, attributes) }}
  {% elseif element.input_type == constant('SI_FIELD_TYPE_HIDDEN') %}
    {{ builder.hidden(element, classes, attributes) }}
  {% elseif element.input_type == constant('SI_FIELD_TYPE_FILE') %}
    {{ builder.file(element, classes, attributes) }}
  {% elseif element.input_type == constant('SI_FIELD_TYPE_RADIO') %}
    {{ builder.radio(element, classes, attributes) }}
  {% elseif element.input_type == constant('SI_FIELD_TYPE_SELECT') %}
    {{ builder.select(element, classes, attributes) }}
  {% elseif element.input_type == constant('SI_FIELD_TYPE_NUMBER') %}
    {{ builder.number(element, classes, attributes) }}
  {% endif %}
{% endmacro input %}

{# ####################################
 #               text
 #################################### #}
{% macro text(element, classes, attributes) %}
  <input {{ easyAttrs(element, classes|merge([]), attributes|merge({
    'type': element.input_type,
    'value': element.value
  })) }}>
{% endmacro text %}

{# ####################################
 #             textarea
 #################################### #}
{% macro textarea(element, classes, attributes) %}
  <textarea {{ easyAttrs(element, classes|merge([]), attributes|merge([])) }}>{{ element.value }}</textarea>
{% endmacro textarea %}

{# ####################################
 #             checkbox
 #################################### #}
{% macro checkbox(element, classes, attributes) %}
  {# 値がないケースのためにhiddenを仕込む #}
  <input name="{{ element.name }}" {{ renderAttributes(
  element,
  attributes|merge({ 'type': 'hidden', 'value': 'none' })
  ) }}>
  {# 要素分Checkbox作成 #}
  {% for choice_value in element.choice_values %}
    <input {{ choice_value.selected }}
    name="{{ element.name }}[]" {{ renderAttributes(element,
  attributes|merge({ 'type': element.input_type, 'value': choice_value.key })
  ) }}
    >{{ choice_value.name }}
  {% endfor %}
{% endmacro checkbox %}

{# ####################################
 #             hidden
 #################################### #}
{% macro hidden(element, classes, attributes) %}
  <input {{ easyAttrs(element, classes|merge([]), attributes|merge({
    'type': element.input_type,
    'value': element.value
  })) }}>
{% endmacro hidden %}

{# ####################################
 #             file
 #################################### #}
{% macro file(element, classes, attributes) %}
  <div id="{{ element.id }}">
    {% if element.value is not empty %}
      {% if isImage(element.value) %}
        <img src="{{ element.value }}" alt="選択中の画像">
      {% else %}
        <p>{{ basename(element.value) }}</p>
      {% endif %}
    {% endif %}
    {% if isAdmin() %}
      <input {{ easyAttrs(element, classes|merge([]), attributes|merge({
        'type': 'hidden',
        'value': element.value
      }), ['id']) }}>
      <a href="javascript:void(0);" data-url-input="{{ element.id }}" id="{{ element.id }}-img"
         class="button upload-btn">ファイル選択</a>
      <a href="javascript:void(0);" data-url-input="{{ element.id }}" class="upload-clear-btn">削除</a>
    {% else %}
      <input {{ easyAttrs(element, classes|merge([]), attributes|merge({
        'type': element.input_type,
        'value': element.value
      })) }}>
    {% endif %}
  </div>
{% endmacro file %}

{# ####################################
 #             radio
 #################################### #}
{% macro radio(element, classes, attributes) %}
  {% for choice_value in element.choice_values %}
    <input {{ choice_value.selected }} name="{{ element.name }}" {{ renderAttributes(
  element,
  attributes|merge({ 'type': element.input_type, 'value': choice_value.key })
  ) }}>{{ choice_value.name }}
  {% endfor %}
{% endmacro radio %}

{# ####################################
 #             select
 #################################### #}
{% macro select(element, classes, attributes) %}
  <select name="{{ element.name }}">
    {% for choice_value in element.choice_values %}
      <option {{ choice_value.selected }} {{ renderAttributes(
      element,
      attributes|merge({ 'value': choice_value.key })
      ) }}>{{ choice_value.name }}</option>
    {% endfor %}
  </select>
{% endmacro select %}

{# ####################################
 #             number
 #################################### #}
{% macro number(element, classes, attributes) %}
  <input {{ easyAttrs(element, classes|merge([]), attributes|merge({
    'type': element.input_type,
    'value': element.value
  })) }}>
{% endmacro number %}
